现状
	价值沉淀：
		1 5个超参数：1 打分 4 BM25 0.2 语义0.8 配比 / rerank
		basic 向量召回
			1 增加上下文
			2 向量 + BM25 = hybrid 配比 score 原始 A
			3 rerank 配比 B
		2 整体流程
		3 评估方法 RAG 准确率 召回率
优化方向
	打分可以再优化
	rerank可以优化
	context 去重 设计

问题 - top5 > 0.75
---------------------------------------------------

回答不好的问题 basic top-5
	1 在哪些情况下Claude无法协助用户？ Claude cannot open URLs, links, or videos
	2 本文系列的结构如何？
	
2024-12-30 00:48:04,559 - INFO  - evaluator.py[line:167] - ----------------- Contextual metrics: {'basic_rag': {'pass@5': 52.0/58, 'pass@10': 58.0, 'pass@20': 58.0}, 
'contextual_rag': {'pass@5': 55.0/58, 'pass@10': 58.0, 'pass@20': 58.0}}

2024-12-30 00:48:04,560 - INFO  - evaluator.py[line:173] - basic_rag      pass@5: 0.8966
2024-12-30 00:48:04,562 - INFO  - evaluator.py[line:173] - contextual_rag pass@5: 0.9483


{'basic_rag': {'pass@5': 0.896551724137931, 'pass@10': 1.0, 'pass@20': 1.0}, 'contextual_rag': {'pass@5': 0.9482758620689655, 'pass@10': 1.0, 'pass@20': 1.0}}

---------------------------------------------------

数据错乱应对
	方案1
	1 basic
		2 入库 golden_chunk 值
	2 context
		1 入库 answer + golden_chunk
	3使用现有的evalset提问
		以相似度打分
		
	方案2
	重构eval集，使每个问题都和分段后的内容对应，目前的只聚焦在了文章的前面部分


我现在想设计一个文档对话ai助手，场景是：1 用户收集了很多文件，然后2用户可以跟ai对话，聊与文档有关或无关的问题，然后3他们的聊天记录可以转为笔记，笔记又可以进一步归档成为1文档，形成一个知识闭环。这个系统最大的优势就是灵活性，相比传统的ai对话，尽管那些产品可以上传很多文件，但是不能生成笔记，对于用户来说，只有输入，没有输出，另一方面，这些系统不支持跨文档，跨聊天记录的情境理解（比如我想跟我前天与ai聊的事联系起来）。

现在，参考这些资料，帮我的ai助手写5层提示词，以k：v的形式呈现。

用户与我进行关于上传文档内容的对话，可以询问与文档相关或不相关的问题。我的目标是理解用户意图，并能将对话内容总结为笔记，最终形成新的文档。", "2. 系统提示词": "你是一个文档对话助手，你的任务是理解用户关于其上传文档的提问，并能记住之前的对话内容。你需要能够根据用户的指示生成笔记，并将笔记保存为文档。记住，你的核心功能是促进用户与其文档之间的灵活互动和知识提炼。", "3. 全局支配": "在每次会话中，优先理解用户当前的问题。如果用户的问题涉及到之前的对话或不同的文档，请尝试关联上下文。在生成笔记时，确保内容准确并与对话主题相关。始终以灵活的方式处理用户请求，避免僵硬的回答。", "4. 个性化指令": "根据用户对笔记格式和文档结构的要求进行调整。例如，用户可能希望笔记以Markdown格式呈现，或者希望文档按照特定章节进行归档。 记住用户的偏好，并在后续交互中应用。", "5. 风格化": "以清晰、简洁和专业的风格与用户交流。在生成笔记和文档时，语言应准确且易于理解。你可以根据用户的反馈调整你的语言风格，以更好地满足他们的需求。